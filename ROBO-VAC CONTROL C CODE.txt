/****************************************************************************************************************
Project name: ROBO-VAC
Author: Yongxin Zhang
Date: 11/03/2019
Description: This code is used for getting signals from senors and fulfill motor control based on the distances 
around the vehicle. 
****************************************************************************************************************/

#include "mbed.h"
#include "stdlib.h"
#include "time.h"

Serial pc(USBTX,USBRX);

DigitalOut trigger[]={p5,p7,p9,p11,p13};
DigitalOut myled1(LED1); //monitor trigger
DigitalOut myled2(LED2); //monitor echo
DigitalIn  echo[]={p6,p8,p10,p12,p14};
DigitalOut myled[]={p23, p24, p25};

PwmOut PWMA(p21);
//PwmOut PWMB(p23);

DigitalOut AIN2(p17);   // CCW Movement, CCW Motor A Movement, + Polarity, Controls Motor A in the forward direction
DigitalOut AIN1(p18);   // CW  Movement, CW Motor  A Movement, - Polarity, Controls Motor A in the reverse direction
DigitalOut STDBY(p22);  // H-Bridge functions when pull down resistor is actively pulled high 
DigitalOut BIN2(p20);   // CCW Movement, CCW Motor B Movement, + Polarity, Controls Motor B in the forward direction
DigitalOut BIN1(p19);   // CW  Movement, CW  Motor B Movement, - Polarity, Controls Motor B in the reverse direction

Timer sonar[2];

#define MF 5
#define MB 10
#define ML 15
#define MR 20
#define ST 0
#define FRONT distance[0]
#define LEFT distance[1]
#define RIGHT distance[2]
#define LEFTBOTTEM distance[3]
#define RIGHTBOTTEM distance[4]
#define LOCKED 1

void moveFwd(void);
void moveBack(void);
void moveLeft(void);
void moveRight(void);
void stop(void);
int senorMeasuring(int);
void disChecking(int*, char*, char*);
void roboControl(int);

int main()
{
    int distance[3];
    char state,iflocked;
    char i;
    i=0;
    iflocked = 0;
    
    myled[0] = 0;
    myled[1] = 0;
    myled[2] = 0;
    
    while(1)
    {
        sonar[1].reset();
        sonar[1].start();
            
        while(sonar[1].read_us()<6100)
        {
           i %= 3;
           distance[i] = senorMeasuring(i);
           printf(" dist%d is %d cm \n\r",i,distance[i]);
           break;
        }
        i++;
            
        if(!iflocked)
        {
            disChecking(&distance[0], &state, &iflocked);            
        }
                  
///Moter Control  
        switch(state)
        {
            case MF:
                moveFwd();
                iflocked = 0;
                printf("State: MF \n\r");
                break;
            case MB:
                moveBack();
                printf("State: MB \n\r");
                    
                if(LEFT >= RIGHT && LEFT>=15)
                {    
                    state = ML;
                        
                } 
                    
                else if (RIGHT >= LEFT && RIGHT>=15) 
                {   
                    state = MR;    
    
                }
                break;
            case ML:             
                moveLeft();
                printf("State: ML \n\r");
                        
                if(RIGHT<15)
                {
                    state = MF; 
                    iflocked = 0;
                    printf("State: MF \n\r");   
                }
                break;
            case MR:
                moveRight();
                printf("State: MR \n\r");
                    
                if(LEFT<15)
                {
                    state = MF;
                    iflocked = 0;
                    printf("State: MF \n\r");   
                }
                break;
            default:
                stop();
                printf("State: Stop \n\r");
                break;  
        }
            
        while(sonar[1].read_us()<12000)
        {     
        }
        sonar[1].reset();    
    }
}////****************endofMain
 

//Function Name: MoveFwd
//Author: Tom Kroczek
//Date:9/25/2019
//Input:N/A
//Output:N/A
//Description: Motors are programed to operate with a .4 PWM Signal. AIN2 & AIN1 = 1 causes the the signal to switch interal mosfets 
//to produce a signal that is capable of spinning the motors in the forwards diretion when STDBY pull down resistor is set to high logic
//After 3 seconds of operarion, PWM = 0 and the logic input to control the mosfets are = 0 along with the pull down resistor let to logic
//Referancing: https://learn.sparkfun.com/tutorials/tb6612fng-hookup-guide?_ga=2.244497413.1619793641.1569461243-1058473736.1550955095 
void moveFwd(void)
{
    
    PWMA = .4;   
    AIN2 = 1;   //Motor A Spins in the Forward Direction
    BIN2 = 1;   //Motor B Spings in the Forward Direction
    STDBY = 1; 
    //wait(3);
    PWMA = 0;   
    AIN2 = 0;   // Motors are in an off state
    BIN2 = 0;
    STDBY = 0; 
    myled[0] = 1;
    myled[1] = 0;
    myled[2] = 0;
    
    
    
}////****************endofmoveFwd
    
//Function Name: moveBack
//Author: Tom Kroczek
//Date:9/25/2019
//Input:N/A
//Output:N/A
//Description: Motors are programed to operate with a .7 PWM Signal. AIN1 & AIN1 = 1 causes the the signal to switch interal mosfets 
//to produce a signal that is capable of spinning the motors in the Reverse diretion when STDBY pull down resistor is set to high logic
//After 3 seconds of operarion, PWM = 0 and the logic input to control the mosfets are = 0 along with the pull down resistor let to logic
//Referancing: https://learn.sparkfun.com/tutorials/tb6612fng-hookup-guide?_ga=2.244497413.1619793641.1569461243-1058473736.1550955095
void moveBack(void)
{
    
    PWMA = .7;   
    AIN1 = 1;      //Motor A Spins in the Reverse Direction
    BIN1 = 1;      //Motor B Spins in the Reverse Direction
    STDBY = 1;     //Pull down resistor set to high to activate the circuit 
    //wait(3);
    PWMA = 0;   
    AIN1 = 0;
    BIN1 = 0;
    STDBY = 0; 
    myled[0] = 1;
    myled[1] = 1;
    myled[2] = 1;
    
}////****************endofmoveBack

//Function Name: moveLeft
//Author: Tom Kroczek
//Date:9/25/2019
//Input:N/A
//Output:N/A
//Description: Motors are programed to operate with a .4 PWM Signal. AIN2 & AIN1= 1 causes the the signal to switch interal mosfets 
//to produce a signal that is capable of spinning motor A in the forward direction and spinning motor B in the Reverse diretion when STDBY 
//pull down resistor is set to high logic. The two motor's spinning in opposite directions causes it to turn left. After 3 seconds of operarion, 
//PWM = 0 and the logic input to control the mosfets are = 0 along with the pull down resistor let to logic
//Referancing: https://learn.sparkfun.com/tutorials/tb6612fng-hookup-guide?_ga=2.244497413.1619793641.1569461243-1058473736.1550955095  
void moveLeft(void)
{
    
    PWMA = .4;   
    AIN2 = 1;   //Motor A Spins in the Forward Direction
    BIN1 = 1;   //Motor B Spins in the Reverse Direction
    STDBY = 1; 
    //wait(3);
    PWMA = 0;   
    AIN2 = 0;
    BIN1 = 0;
    STDBY = 0;
    myled[0] = 0;
    myled[1] = 1;
    myled[2] = 0;
     
}////****************endofmoveLeft

//Function Name: moveRight
//Author: Tom Kroczek
//Date:9/25/2019
//Input:N/A
//Output:N/A
//Description: Motors are programed to operate with a .4 PWM Signal. AIN1 & AIN2= 1 causes the the signal to switch interal mosfets 
//to produce a signal that is capable of spinning motor A in the reverse direction and spinning motor B in the forward diretion when STDBY 
//pull down resistor is set to high logic. The two motor's spinning in opposite directions causes it to turn left. After 3 seconds of operarion, 
//PWM = 0 and the logic input to control the mosfets are = 0 along with the pull down resistor let to logic
//Referancing: https://learn.sparkfun.com/tutorials/tb6612fng-hookup-guide?_ga=2.244497413.1619793641.1569461243-1058473736.1550955095
void moveRight(void)
{
    
    PWMA = .4;   
    AIN1 = 1;   //Motor A Spins in the Reverse Direction
    BIN2 = 1;   //Motor B Spins in the Forward Direction
    STDBY = 1; 
    //wait(3);
    PWMA = 0;   
    AIN1 = 0;
    BIN2 = 0;
    STDBY = 0;
    myled[0] = 0;
    myled[1] = 0;
    myled[2] = 1;
     
}////****************endofmoveRight 

//Function Name: Stop
//Author: Tom Kroczek
//Date:9/25/2019
//Input:N/A
//Output:N/A
//Description: Motors are programed to operate with a .4 PWM Signal. AIN1 & AIN2= 1 causes the the signal to switch interal mosfets 
//to produce a signal that is capable of spinning motor A in the reverse direction and spinning motor B in the forward diretion when STDBY 
//pull down resistor is set to high logic. The two motor's spinning in opposite directions causes it to turn left. After 3 seconds of operarion, 
//PWM = 0 and the logic input to control the mosfets are = 0 along with the pull down resistor let to logic
//Referancing: https://learn.sparkfun.com/tutorials/tb6612fng-hookup-guide?_ga=2.244497413.1619793641.1569461243-1058473736.1550955095
void stop(void)
{
    
    PWMA = 0;   
    AIN1 = 0;   //Motor A Spins in the Reverse Direction
    AIN2 = 0;
    
    BIN1 = 0; 
    BIN2 = 0;   //Motor B Spins in the Forward Direction
    STDBY = 0; 
    //wait(3);
    PWMA = 0;   
    AIN1 = 0;
    BIN2 = 0;
    STDBY = 0;
    myled[0] = 0;
    myled[1] = 0;
    myled[2] = 0;
     
}////****************endofstop

//Function Name: senorMeasuring
//Author: Yongxin Zhang
//Date: 11/03/2019
//Input: sensor number
//Output: distance
//Description: Using a timer to record the triger and echo time, then calculate the distance based on the time interval, 
//and set a default maximum time 6000us to avoid timeout. 

int senorMeasuring(int i)
{
    
    int distance;
    int correction;
    
    sonar[0].reset();  
           
// measure actual software polling timer delays
// delay used later in time correction
// start timer
    sonar[0].start();
// min software polling delay to read echo pin
    while (echo[i]==2) 
    {
        if (sonar[0].read_us()>10)
        break;
        }

    myled2 = 0;
// stop timer
    sonar[0].stop();
// read timer
    correction = sonar[0].read_us();
    //printf("Approximate software overhead timer delay is %d uS\n\r",correction);
       
//Loop to read Sonar distance values, scale, and print
    
// trigger sonar to send a ping
        trigger[i] = 1;
        myled1 = 1;
        myled2 = 0;
        sonar[0].reset();
        wait_us(10.0);
        trigger[i] = 0;
        myled1 = 0;
//wait for echo high
        while (echo[i]==0) {
            if(sonar[0].read_us()>=6000)
            break;
            }
        myled2=echo[i];
//echo high, so start timer
        sonar[0].start();
//wait for echo low
        while (echo[i]==1) {
            if(sonar[0].read_us()>=6000)
            break;
            }
//stop timer and read value
        sonar[0].stop();
//subtract software overhead timer delay and scale to cm
        distance = (sonar[0].read_us()-correction)/58.0;
        myled2 = 0;
        //printf(" dist%d is %d cm \n\r",i,distance);
//wait so that any echo(s) return before sending another ping
        //wait_us(10);
    return distance;
} ////****************endofsensorMeasuring



//Function Name: disChecking
//Author: Yongxin Zhang
//Date: 11/03/2019
//Input: distance, state, iflocked
//Output: None
//Description: Determine the motor actions based on the distance around the vehicle. 

void disChecking(int *distance, char *state, char *iflocked)
{
    
    if(*distance <=10) 
    {
        if(*(distance+1) >= *(distance+2) && *(distance+1)>=15)
        {    
            *state = ML;
            *iflocked = LOCKED;
                    
        } 
                
        else if (*(distance+2) >= *(distance+1) && *(distance+2)>=15) 
        {   
                    
            *state = MR;
            *iflocked = LOCKED;    

        }
        else
        {
            *state = MB;
            *iflocked = LOCKED;
        } 
                
                
    }
        
    else
    {
        *state = MF;     
    }  

}////****************endofdisChecking